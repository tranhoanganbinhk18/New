########################################################################
# JMS capture properties: receive JMS messages, create GoldenGate trails
#
## connection factory name
# gg.jms.connectionFactory=...
## queue/topic name
# gg.jms.destination=...
## destination (queue/topic) username/password
# gg.jms.user=...
# gg.jms.password=...
## standard JNDI properties
# java.naming.provider.url=...
# java.naming.factory.initial=...
## put java.naming.security.* properties in dirprm/jndi.properties
# java.naming.security.principal=goldengate
# java.naming.security.credentials=goldengate
########################################################################

##### Example JMS settings (e.g., for ActiveMQ)
gg.jms.connectionFactory=ConnectionFactory
gg.jms.destination=dynamicQueues/testQ

java.naming.provider.url=tcp://localhost:61616?jms.prefetchPolicy.all=1000
java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory

## data source
gg.source=jms

# set localtx=false to disable JMS transactions, and use client_acknowledge
gg.jms.localtx=false
gg.jms.id=time

# reporting frequency to log file
gg.report.time=1 hr

##### Configuration for native JNI library
# Set JVM options, e.g: -Xmx512m -Djava.class.path=...
# Set logging options (put configuration files in dirprm):
#  -Dlog4j.configuration={your log4j.properties}
#  -Dlogback.configurationFile={your logback.xml}
jvm.bootoptions=-Djava.class.path=dirprm:ggjava/ggjava.jar:/opt/activemq/activemq-all.jar

# native JNI library log configuration (output directory, filename prefix)
goldengate.log.logname=dirrpt/jmsvam_jni
goldengate.log.level=INFO
goldengate.log.tostdout=false
goldengate.log.tofile=true
goldengate.log.modules=COPYBOOK,DEFSCHEMA,DELIMITEDPARSER,FILEPROVIDER,FIXEDPARSER,JAVAVAM,JAVAVAMIMPL,JMSPROVIDER,LOGMALLOC,PARSER,PROVIDER,RECMGR,SFXML,TXSTORE,UEUTIL,UTILS,XMLPARSER,XMLRULES

########################################################################
# XML parsing properties: use the following properties to parse the GG JMS
#  delivery built-in "xml2" message format (less verbose than "format=xml",
#  more verbose than "minxml".)
#  The provided sample trail (tc00000, tc.def) can be used with GG JMS delivery
# to send messages that can be parsed by this JMS consumer configuration.
########################################################################
parser.type=xml
xml.sourcedefs=dirdef/tc.def
xml.rules=tx_rule

### transactions
tx_rule.type=tx
tx_rule.match=/transaction
tx_rule.subrules=op_rule
tx_rule.txid=*txid

### operations
op_rule.type=op
op_rule.match=./operation
op_rule.seqid=*seqid
op_rule.timestamp=@ts

op_rule.schemaandtable=@table
op_rule.optype=@type
op_rule.optype.insertval=INSERT
op_rule.optype.updateval=UPDATE
op_rule.optype.deleteval=DELETE
op_rule.subrules=col_rule

### subrules.columns
col_rule.type=col
col_rule.match=./column
col_rule.name=@name
col_rule.index=@index
col_rule.before.value=./before-value/text()
col_rule.before.isnull=./before-value[@isNull=true]/@isNull
col_rule.after.value=./after-value/text()
col_rule.before.isnull=./after-value[@isNull=true]/@isNull
## note: checking element existence is faster than getting attributes, so the
## following column rules are preferable. However, the XML format needs to be
## changed to: <after-value><isNull/></after-value>
## instead of: <after-value isNull='true'/>
#col_rule.before.isnull=./before-value/isNull/exists()
#col_rule.after.isnull=./after-value/isNull/exists()


## transaction ID notes:
## the following uses a system-generated tx ID
#    tx_rule.txid=*txid
## examples for txid, using message properties or headers:
#    tx_rule.txid=$GG_XID
#    tx_rule.txid=$JMSMessageID
#
## sequence ID notes:
## if seqid=$jmsid, use gg.jms.id
#    op_rule.seqid=$jmsid
## can use header/property for seqid
#    op_rule.seqid=$GG_ID
#    op_rule.timestamp=$JMSTimestamp
## for timestamp=$GG_JMS_READ_TIMESTAMP, use timestamp.format=JMS (posix)
#    op_rule.timestamp=$GG_JMS_READ_TIMESTAMP
#    op_rule.timestamp.format=JMS
## define msg property timestamp format, eg: 2008-01-20 23:14:04.000000
#    op_rule.timestamp=$GG_TX_TIMESTAMP_STR
#    op_rule.timestamp.format=YYYY-MM-DD HH:MI:SS.FFFFFF

