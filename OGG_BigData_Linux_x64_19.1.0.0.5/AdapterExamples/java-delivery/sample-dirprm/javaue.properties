## list of active event handlers (handlers not in the list are ignored)
gg.handlerlist=sample_test
#gg.handlerlist=sample_jms,sample_test

## configure a handler "xyz" (gg.handlerlist=xyz) using
## properties like: gg.handler.xyz.{property}={value}

###############################################################
## append to classpath here, or set JVM property (below): -Djava.class.path=...
# gg.classpath=path/to/jms_provider_impl.jar,path/to/resources

###############################################################
## JNDI settings (see your JMS provider documentation)
java.naming.provider.url=tcp://localhost:61616
java.naming.factory.initial=org.apache.activemq.jndi.ActiveMQInitialContextFactory
# java.naming.security.principal=goldengate
# java.naming.security.credentials=goldengate


###############################################################
## Sample file handler, creates a single file, overwritten at startup.
## Useful for testing message formatting, since the exact same formatters
## can be used for JMS messages or writing to a file.
gg.handler.sample_test.type=singlefile
gg.handler.sample_test.file=dirout/output.xml
# gg.handler.sample_test.append=true
## tx mode buffers transaction in memory and then formats; op mode processes
## each operation as it is received
gg.handler.sample_test.mode=tx
gg.handler.sample_test.format=xml
## provided formatters (xml, xml2, text, csv, etc),  custom can be
## implemented in Java or velocity templates (found in dirprm)
# gg.handler.sample_test.format=com.mycompany.MyFormatter
# gg.handler.sample_test.format=sample_op.vm


###############################################################
## Example JMS event handler, one msg per operation, using "xml2" format
## (JNDI properties "java.naming.*" used for initial context, provider URL)
gg.handler.sample_jms.type=jms
gg.handler.sample_jms.destinationType=queue
gg.handler.sample_jms.destination=dynamicQueues/ggdemo.queueA
gg.handler.sample_jms.connectionFactory=ConnectionFactory
gg.handler.sample_jms.mode=op
gg.handler.sample_jms.format=xml2
## optionally customize the format (same formatters as used for writing to files)
# gg.handler.sample_jms.format=my_formatter.vm
# gg.handler.sample_jms.format=com.sample.MyCustomFormat
#
## other property settings
# gg.handler.sample_jms.maxRetry=150
# gg.handler.sample_jms.retryDelay=5 sec
# gg.handler.sample_jms.retryEnabled=true
## startup retry should also be used with mgr auto-restart
# gg.handler.sample_jms.retryAtStartup=true
# gg.handler.sample_jms.startupMaxRetry=25
# gg.handler.sample_jms.startupRetryDelay=7 sec
#
# Queue/Topic Fanout - How to direct operations to queues/topics by properties.
#
# In gg.handler.sample_jms.destination you can specify a custom destination template
# For Example: gg.handler.sample_jms.destination=dynamicQueues/${schemaName}.${tableName}.${opType}
# If a DML targeting schema Test and table Employee and operation INSERT, it would write the operation
# to queue dynamicQueues/Test.Employee.INSERT.
# The key word Substitutions are as follows (case sensitive):
#     ${catalogName} - For the DB catalog name (will use text "null" if the source DB does not support a Catalog)
#     ${schemaName}  - For the DB Schema name (will use text "null" if the source DB does not support a Catalog)
#	  ${tableName}   - For the Table Name
#     ${opType}      - For the operation type (INSERT, UPDATE, DELETE)
# These key words can be specified as any combination.
# This also applies to physicalDestinations as in gg.handler.jmshandler.physicalDestination=dynamicTopics/${schemaName}.${tableName}.${opType}
# 


###############################################################
## Another JMS event handler, sending one message per transaction, using "minxml"
## format (be sure the max tx size is reasonable, otherwise the pump, the JMS
## server and JMS consumers could all run out of memory)
# gg.handler.test_jms2.type=jms
# gg.handler.test_jms2.destination=dynamicQueues/ggdemo.queueB
# gg.handler.test_jms2.format=minxml
# gg.handler.test_jms2.mode=tx
# ...etc
## disable local JMS transactions: not necessary if sending one
## message per transaction
# gg.handler.test_jms2.localTx=false
#
# set custom JMS message properties via custom Java class
#gg.handler.test_jms2.custom=com.example.custom.MyMessageLifecycleListener
# filter events either in the pump prm file, or in Java
#gg.handler.test_jms2.filter=com.example.custom.MyEventFilter

###############################################################
# By default java.util.logging is used; the underlying implementation can
# be changed (e.g. to Logback or Log4j). (To use logback, additional jars
# will have to be dowloaded.) There are sample logging config files for info
# and debug-level logging for jdk (java.util.logging), slf4j+logback and log4j;
# just specify the gg.log.level and the correct config file will be used.
# gg.log.level     = [ info | debug | trace ]
# gg.log           = [ jdk | logback | log4j ]
# gg.log.classpath = [ classpath ]
gg.log.level=debug
gg.log=log4j

###############################################################
# Java Properties for native library ("C" User Exit)

## Duplicates-checkpoint-file (operation checkpoint file), set to TRUE to *disable* the
## operation-checkpoint file. Only enable this if (1) JMS local transactions are NOT used,
## AND (2) the handler is processing in "op mode" (sending one operation per message).
## If there is an abend in the middle of a transaction, "extract" restarts at the beginning
## of the txn; when the user-exit checkpoint file is used, operations sent to the user-exit
## again after a restart following an abend will be skipped.
goldengate.userexit.nochkpt=true

## the file (and path) prefix for the checkpoint file, by default
##  named the same as the extract
# goldengate.userexit.chkptprefix=JAVAUE_

## modify JVM memory config and other "-D" options (note: previous releases use "javawriter.bootoptions"):
# jvm.bootoptions=-Xmx256m -Djava.class.path=...
#
## reset the logging config file to custom properties file
##  -Djava.util.logging.config.file=... => jdk logging (java.util.logging)
##  -Dlogback.configurationFile=...     => logback (jars not included)
##  -Dlog4j.configuration=...           => log4j
# jvm.bootoptions=-Dlogback.configurationFile=logback-debug.xml

